import React, { useState, useEffect } from 'react';
import { useAI } from '../contexts/AIContext';
import { dbHelpers } from '../lib/supabase';
import SafeIcon from '../common/SafeIcon';
import * as FiIcons from 'react-icons/fi';

const { FiPlus, FiEdit, FiTrash2, FiAlertTriangle, FiShield, FiExternalLink, FiSearch } = FiIcons;

const VulnerabilityManagement = () => {
  const { hasApiKey, explainVulnerability } = useAI();
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [editingVuln, setEditingVuln] = useState(null);
  const [aiExplanation, setAiExplanation] = useState('');
  const [analyzingVuln, setAnalyzingVuln] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [formData, setFormData] = useState({
    cve_id: '',
    title: '',
    description: '',
    system: '',
    severity: 'medium',
    status: 'unverified',
    cvss_score: '',
    affected_versions: '',
    remediation: '',
  });

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const fetchVulnerabilities = async () => {
    setLoading(true);
    try {
      const { data, error } = await dbHelpers.getVulnerabilities();
      if (error) throw error;
      setVulnerabilities(data || []);
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const vulnData = {
        ...formData,
        created_at: new Date().toISOString(),
      };

      if (editingVuln) {
        const { error } = await dbHelpers.updateVulnerability(editingVuln.id, formData);
        if (error) throw error;
      } else {
        const { error } = await dbHelpers.createVulnerability(vulnData);
        if (error) throw error;
      }
      
      await fetchVulnerabilities();
      setShowModal(false);
      setEditingVuln(null);
      setAiExplanation('');
      setFormData({
        cve_id: '',
        title: '',
        description: '',
        system: '',
        severity: 'medium',
        status: 'unverified',
        cvss_score: '',
        affected_versions: '',
        remediation: '',
      });
    } catch (error) {
      console.error('Error saving vulnerability:', error);
    }
  };

  const handleEdit = (vuln) => {
    setEditingVuln(vuln);
    setFormData({
      cve_id: vuln.cve_id || '',
      title: vuln.title || '',
      description: vuln.description || '',
      system: vuln.system || '',
      severity: vuln.severity || 'medium',
      status: vuln.status || 'unverified',
      cvss_score: vuln.cvss_score || '',
      affected_versions: vuln.affected_versions || '',
      remediation: vuln.remediation || '',
    });
    setShowModal(true);
  };

  const handleAIExplain = async () => {
    if (!hasApiKey || !formData.cve_id) return;

    setAnalyzingVuln(true);
    try {
      const explanation = await explainVulnerability(formData.cve_id, formData.description);
      setAiExplanation(explanation);
    } catch (error) {
      console.error('Error getting AI explanation:', error);
    } finally {
      setAnalyzingVuln(false);
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
      case 'low':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'resolved':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      case 'in-progress':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
      case 'unverified':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.cve_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.system?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || vuln.status === statusFilter;
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter;
    return matchesSearch && matchesStatus && matchesSeverity;
  });

  const getStats = () => {
    const total = vulnerabilities.length;
    const critical = vulnerabilities.filter(v => v.severity === 'critical').length;
    const high = vulnerabilities.filter(v => v.severity === 'high').length;
    const resolved = vulnerabilities.filter(v => v.status === 'resolved').length;
    return { total, critical, high, resolved };
  };

  const stats = getStats();

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          Vulnerability Management
        </h1>
        <button
          onClick={() => setShowModal(true)}
          className="btn-primary flex items-center"
        >
          <SafeIcon icon={FiPlus} className="w-4 h-4 mr-2" />
          Add Vulnerability
        </button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-blue-500">
              <SafeIcon icon={FiShield} className="w-6 h-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                {stats.total}
              </p>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                Total Vulnerabilities
              </p>
            </div>
          </div>
        </div>

        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-red-500">
              <SafeIcon icon={FiAlertTriangle} className="w-6 h-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                {stats.critical}
              </p>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                Critical
              </p>
            </div>
          </div>
        </div>

        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-orange-500">
              <SafeIcon icon={FiAlertTriangle} className="w-6 h-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                {stats.high}
              </p>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                High Severity
              </p>
            </div>
          </div>
        </div>

        <div className="card">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-green-500">
              <SafeIcon icon={FiShield} className="w-6 h-6 text-white" />
            </div>
            <div className="ml-4">
              <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                {stats.resolved}
              </p>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                Resolved
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="card">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="relative">
            <SafeIcon icon={FiSearch} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Search vulnerabilities..."
              className="form-input pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <select
            className="form-input"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="all">All Statuses</option>
            <option value="unverified">Unverified</option>
            <option value="in-progress">In Progress</option>
            <option value="resolved">Resolved</option>
          </select>
          <select
            className="form-input"
            value={severityFilter}
            onChange={(e) => setSeverityFilter(e.target.value)}
          >
            <option value="all">All Severities</option>
            <option value="critical">Critical</option>
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
          </select>
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div className="card">
        {loading ? (
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-800">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    CVE ID / Title
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    System
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    Severity
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    CVSS Score
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                {filteredVulnerabilities.map((vuln) => (
                  <tr key={vuln.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {vuln.cve_id || 'N/A'}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {vuln.title}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      {vuln.system}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getSeverityColor(vuln.severity)}`}>
                        {vuln.severity}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(vuln.status)}`}>
                        {vuln.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                      {vuln.cvss_score || 'N/A'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => handleEdit(vuln)}
                          className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                        >
                          <SafeIcon icon={FiEdit} className="w-4 h-4" />
                        </button>
                        {vuln.cve_id && (
                          <a
                            href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cve_id}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300"
                          >
                            <SafeIcon icon={FiExternalLink} className="w-4 h-4" />
                          </a>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowModal(false)}></div>
            
            <div className="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
              <form onSubmit={handleSubmit}>
                <div className="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">
                    {editingVuln ? 'Edit Vulnerability' : 'Add New Vulnerability'}
                  </h3>
                  
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="form-label">CVE ID</label>
                        <input
                          type="text"
                          className="form-input"
                          placeholder="CVE-2023-12345"
                          value={formData.cve_id}
                          onChange={(e) => setFormData({...formData, cve_id: e.target.value})}
                        />
                      </div>
                      
                      <div>
                        <label className="form-label">CVSS Score</label>
                        <input
                          type="number"
                          step="0.1"
                          min="0"
                          max="10"
                          className="form-input"
                          value={formData.cvss_score}
                          onChange={(e) => setFormData({...formData, cvss_score: e.target.value})}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="form-label">Title</label>
                      <input
                        type="text"
                        className="form-input"
                        value={formData.title}
                        onChange={(e) => setFormData({...formData, title: e.target.value})}
                        required
                      />
                    </div>

                    <div>
                      <label className="form-label">Description</label>
                      <textarea
                        className="form-input"
                        rows="3"
                        value={formData.description}
                        onChange={(e) => setFormData({...formData, description: e.target.value})}
                        required
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div>
                        <label className="form-label">System/Software</label>
                        <input
                          type="text"
                          className="form-input"
                          value={formData.system}
                          onChange={(e) => setFormData({...formData, system: e.target.value})}
                          required
                        />
                      </div>
                      
                      <div>
                        <label className="form-label">Severity</label>
                        <select
                          className="form-input"
                          value={formData.severity}
                          onChange={(e) => setFormData({...formData, severity: e.target.value})}
                        >
                          <option value="low">Low</option>
                          <option value="medium">Medium</option>
                          <option value="high">High</option>
                          <option value="critical">Critical</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="form-label">Status</label>
                        <select
                          className="form-input"
                          value={formData.status}
                          onChange={(e) => setFormData({...formData, status: e.target.value})}
                        >
                          <option value="unverified">Unverified</option>
                          <option value="in-progress">In Progress</option>
                          <option value="resolved">Resolved</option>
                        </select>
                      </div>
                    </div>

                    <div>
                      <label className="form-label">Affected Versions</label>
                      <input
                        type="text"
                        className="form-input"
                        placeholder="e.g., 1.0-2.5, all versions before 3.1"
                        value={formData.affected_versions}
                        onChange={(e) => setFormData({...formData, affected_versions: e.target.value})}
                      />
                    </div>

                    <div>
                      <label className="form-label">Remediation Steps</label>
                      <textarea
                        className="form-input"
                        rows="4"
                        placeholder="Steps to fix or mitigate this vulnerability..."
                        value={formData.remediation}
                        onChange={(e) => setFormData({...formData, remediation: e.target.value})}
                      />
                    </div>

                    {hasApiKey && formData.cve_id && (
                      <div>
                        <button
                          type="button"
                          onClick={handleAIExplain}
                          disabled={analyzingVuln}
                          className="btn-secondary"
                        >
                          {analyzingVuln ? 'Getting AI Explanation...' : 'Get AI Explanation'}
                        </button>
                      </div>
                    )}

                    {aiExplanation && (
                      <div className="bg-blue-50 dark:bg-blue-900 p-4 rounded-lg">
                        <h4 className="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">
                          AI Analysis:
                        </h4>
                        <div className="text-sm text-blue-700 dark:text-blue-300 whitespace-pre-wrap">
                          {aiExplanation}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                  <button type="submit" className="btn-primary sm:ml-3">
                    {editingVuln ? 'Update' : 'Create'}
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowModal(false)}
                    className="btn-secondary"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityManagement;